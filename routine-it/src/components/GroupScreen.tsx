import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Input } from './ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';
import { Progress } from './ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Plus, Search, Users, Calendar, Target, Crown, MessageCircle, Filter } from 'lucide-react';

interface GroupScreenProps {
  onNavigate: (screen: string, params?: any) => void;
}

export function GroupScreen({ onNavigate }: GroupScreenProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const categories = [
    { id: 'all', name: 'Ï†ÑÏ≤¥', hoverColor: 'hover:bg-gray-100/70 hover:text-gray-800' },
    { id: 'health', name: 'Í±¥Í∞ï', hoverColor: 'hover:bg-red-100/70 hover:text-red-800' },
    { id: 'exercise', name: 'Ïö¥Îèô', hoverColor: 'hover:bg-orange-100/70 hover:text-orange-800' },
    { id: 'study', name: 'ÌïôÏäµ', hoverColor: 'hover:bg-blue-100/70 hover:text-blue-800' },
    { id: 'lifestyle', name: 'ÏÉùÌôú', hoverColor: 'hover:bg-green-100/70 hover:text-green-800' },
    { id: 'hobby', name: 'Ï∑®ÎØ∏', hoverColor: 'hover:bg-purple-100/70 hover:text-purple-800' }
  ];

  // Ï∞∏Ïó¨ Ï§ëÏù∏ Í∑∏Î£π
  const myGroups = [
    { 
      id: 1, 
      name: 'ÏïÑÏπ® Ïö¥Îèô Ï±åÎ¶∞ÏßÄ', 
      description: 'Îß§Ïùº ÏïÑÏπ® Ïö¥ÎèôÌïòÍ≥† Ïù∏Ï¶ùÌïòÍ∏∞',
      members: 12, 
      type: 'ÏùòÎ¨¥Ï∞∏Ïó¨', 
      progress: 80,
      isOwner: true,
      time: '06:00-09:00',
      category: 'exercise',
      recentMembers: [
        { id: 1, name: 'ÍπÄÎØºÏàò', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face' },
        { id: 2, name: 'Ïù¥ÏßÄÏòÅ', avatar: 'https://images.unsplash.com/photo-1494790108755-2616b95fcebf?w=40&h=40&fit=crop&crop=face' },
        { id: 3, name: 'Î∞ïÏ≤†Ïàò', avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face' }
      ]
    },
    { 
      id: 2, 
      name: 'ÎèÖÏÑú Î™®ÏûÑ', 
      description: 'Ï±Ö ÏùΩÍ≥† ÌõÑÍ∏∞ Í≥µÏú†ÌïòÍ∏∞',
      members: 8, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      progress: 65,
      isOwner: false,
      time: 'Ïñ∏Ï†úÎì†',
      category: 'study',
      recentMembers: [
        { id: 4, name: 'Ï†ïÏàòÌòÑ', avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face' },
        { id: 5, name: 'ÏµúÏòÅÌò∏', avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face' }
      ]
    }
  ];

  // Ï†ÑÏ≤¥ Í∑∏Î£π Î™©Î°ù
  const allGroups = [
    { 
      id: 3, 
      name: 'Î¨º ÎßàÏãúÍ∏∞ Ï±åÎ¶∞ÏßÄ', 
      description: 'ÌïòÎ£® 2L Î¨º ÎßàÏãúÍ∏∞ ÏäµÍ¥Ä',
      members: 25, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      category: 'health',
      time: 'Ïñ∏Ï†úÎì†',
      owner: 'ÍπÄÎèÑÌòÑ'
    },
    { 
      id: 4, 
      name: 'ÏÉàÎ≤Ω 6Ïãú Í∏∞ÏÉÅ', 
      description: 'ÏÉàÎ≤Ω 6ÏãúÏóê ÏùºÏñ¥ÎÇòÎäî ÏäµÍ¥Ä ÎßåÎì§Í∏∞',
      members: 15, 
      type: 'ÏùòÎ¨¥Ï∞∏Ïó¨', 
      category: 'lifestyle',
      time: '06:00-06:30',
      owner: 'Ïù¥ÏÜåÏòÅ'
    },
    { 
      id: 5, 
      name: 'ÏòÅÏñ¥ Í≥µÎ∂Ä', 
      description: 'Îß§Ïùº ÏòÅÏñ¥ ÌïôÏäµÌïòÍ∏∞',
      members: 18, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      category: 'study',
      time: 'Ïñ∏Ï†úÎì†',
      owner: 'Î∞ïÏû¨ÎØº'
    },
    { 
      id: 6, 
      name: 'ÌôàÌä∏Î†àÏù¥Îãù', 
      description: 'ÏßëÏóêÏÑú Ïö¥ÎèôÌïòÎäî ÏäµÍ¥Ä',
      members: 32, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      category: 'exercise',
      time: '18:00-21:00',
      owner: 'ÏµúÍ∞ïÎØº'
    },
    { 
      id: 7, 
      name: 'Î™ÖÏÉÅÌïòÍ∏∞', 
      description: 'Îß§Ïùº 10Î∂Ñ Î™ÖÏÉÅÏúºÎ°ú ÎßàÏùå Îã§Ïä§Î¶¨Í∏∞',
      members: 14, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      category: 'health',
      time: '21:00-22:00',
      owner: 'Ï°∞ÏùÄÎ≥Ñ'
    },
    { 
      id: 8, 
      name: 'Í∑∏Î¶º Í∑∏Î¶¨Í∏∞', 
      description: 'ÌïòÎ£® Ìïú Î≤à Í∑∏Î¶º Í∑∏Î¶¨Îäî ÏãúÍ∞Ñ',
      members: 9, 
      type: 'ÏûêÏú†Ï∞∏Ïó¨', 
      category: 'hobby',
      time: 'Ïñ∏Ï†úÎì†',
      owner: 'ÍπÄÏòàÎÇò'
    }
  ];

  // ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ
  const getFilteredGroups = (filter: string) => {
    let filtered = allGroups;
    
    // Ïú†Ìòï ÌïÑÌÑ∞
    if (filter === 'mandatory') {
      filtered = allGroups.filter(group => group.type === 'ÏùòÎ¨¥Ï∞∏Ïó¨');
    } else if (filter === 'optional') {
      filtered = allGroups.filter(group => group.type === 'ÏûêÏú†Ï∞∏Ïó¨');
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(group => group.category === selectedCategory);
    }
    
    // Í≤ÄÏÉâ ÌïÑÌÑ∞
    if (searchQuery) {
      filtered = filtered.filter(group => 
        group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        group.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    return filtered;
  };

  const getCategoryName = (categoryId: string) => {
    const category = categories.find(c => c.id === categoryId);
    return category ? category.name : categoryId;
  };

  const getCategoryEmoji = (categoryId: string) => {
    switch (categoryId) {
      case 'health': return 'üè•';
      case 'exercise': return 'üí™';
      case 'study': return 'üìö';
      case 'lifestyle': return 'üè†';
      case 'hobby': return 'üé®';
      default: return 'üìã';
    }
  };

  const handleJoinGroup = (groupId: number) => {
    // Í∑∏Î£π Ï∞∏Ïó¨ Î°úÏßÅ
    console.log(`${groupId} Í∑∏Î£πÏóê Ï∞∏Ïó¨Ìï©ÎãàÎã§.`);
    const groupToNavigate = allGroups.find(group => group.id === groupId);
    if (groupToNavigate) {
      onNavigate('group-detail', groupToNavigate);
    }
  };

  const createNewGroup = () => {
    onNavigate('create-group');
  };

return (
    <div className="space-y-4 h-full p-4">
      {/* Í≤ÄÏÉâ Î∞î */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 icon-muted" />
        <Input
          placeholder="Í∑∏Î£π Í≤ÄÏÉâ..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="pl-10 bg-input-background border-border text-foreground placeholder:text-muted-foreground"
        />
      </div>

      {/* Ï∞∏Ïó¨ Ï§ëÏù∏ Í∑∏Î£π */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-base text-card-foreground">Ï∞∏Ïó¨ Ï§ëÏù∏ Í∑∏Î£π</CardTitle>
            <Button 
              variant="outline" 
              size="sm"
              onClick={createNewGroup}
              className="text-card-foreground border-border hover:bg-accent hover:text-card-foreground"
            >
              <Plus className="h-4 w-4 mr-1 icon-secondary" />
              Í∑∏Î£π ÏÉùÏÑ±
            </Button>
          </div>
        </CardHeader>
        <CardContent className="pt-0">
          {myGroups.length > 0 ? (
            <div className="space-y-0">
              {myGroups.map((group, index) => (
                <div key={group.id}>
                  <div 
                    className={`p-3 cursor-pointer hover:bg-accent/50 transition-colors ${
                      index < myGroups.length - 1 ? 'border-b border-border/30' : ''
                    }`}
                    onClick={() => onNavigate('group-detail', group)}
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center space-x-2 flex-1">
                        <span className="text-sm font-medium text-card-foreground">{group.name}</span>
                        {group.isOwner && <Crown className="h-3 w-3 text-yellow-400 icon-accent" />}
                        <Badge variant={group.type === 'ÏùòÎ¨¥Ï∞∏Ïó¨' ? 'destructive' : 'secondary'} className="text-xs">
                          {group.type}
                        </Badge>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          className="p-1 h-auto text-card-foreground hover:text-card-foreground"
                          onClick={(e) => {
                            e.stopPropagation();
                            onNavigate('group-chat', group);
                          }}
                        >
                          <MessageCircle className="h-4 w-4 icon-secondary" />
                        </Button>
                      </div>
                    </div>
                    
                    <p className="text-xs text-muted-foreground mb-2">{group.description}</p>
                    
                    <div className="flex items-center justify-between text-xs text-muted-foreground mb-2">
                      <span>{getCategoryEmoji(group.category)} {getCategoryName(group.category)}</span>
                      <span>üë• {group.members}Î™Ö</span>
                      <span>‚è∞ {group.time}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <Users className="h-12 w-12 icon-muted mx-auto mb-4" />
              <p className="text-sm text-muted-foreground mb-4">Ï∞∏Ïó¨ Ï§ëÏù∏ Í∑∏Î£πÏù¥ ÏóÜÏäµÎãàÎã§</p>
              <Button onClick={createNewGroup} size="sm">
                <Plus className="h-4 w-4 mr-2 icon-secondary" />
                Ï≤´ Í∑∏Î£π ÎßåÎì§Í∏∞
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Ï†ÑÏ≤¥ Í∑∏Î£π */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-base text-card-foreground">Ï†ÑÏ≤¥ Í∑∏Î£π</CardTitle>
            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-24 h-8 text-xs bg-input-background border-border text-foreground">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem 
                    key={category.id} 
                    value={category.id} 
                    className={`text-xs transition-colors ${category.hoverColor}`}
                  >
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <Tabs defaultValue="all">
            <div className="px-4">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="all">Ï†ÑÏ≤¥</TabsTrigger>
                <TabsTrigger value="optional">ÏûêÏú†Ï∞∏Ïó¨</TabsTrigger>
                <TabsTrigger value="mandatory">ÏùòÎ¨¥Ï∞∏Ïó¨</TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="all" className="px-4 pb-4 mt-4">
              <div className="space-y-0">
                {getFilteredGroups('all').map((group, index) => (
                  <div key={group.id}>
                    <div className={`p-3 hover:bg-accent/50 transition-colors ${
                      index < getFilteredGroups('all').length - 1 ? 'border-b border-border/30' : ''
                    }`}>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2 flex-1">
                          <span className="text-sm font-medium text-card-foreground">{group.name}</span>
                          <Badge variant={group.type === 'ÏùòÎ¨¥Ï∞∏Ïó¨' ? 'destructive' : 'secondary'} className="text-xs">
                            {group.type}
                          </Badge>
                        </div>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleJoinGroup(group.id);
                          }}
                          className="text-card-foreground border-border hover:bg-accent hover:text-card-foreground text-xs px-2 py-1"
                        >
                          Ï∞∏Ïó¨ÌïòÍ∏∞
                        </Button>
                      </div>
                      
                      <p className="text-xs text-muted-foreground mb-2">{group.description}</p>
                      
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>{getCategoryEmoji(group.category)} {getCategoryName(group.category)}</span>
                        <span>üë• {group.members}Î™Ö</span>
                        <span>‚è∞ {group.time}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="optional" className="px-4 pb-4 mt-4">
              <div className="space-y-0">
                {getFilteredGroups('optional').map((group, index) => (
                  <div key={group.id}>
                    <div className={`p-3 hover:bg-accent/50 transition-colors ${
                      index < getFilteredGroups('optional').length - 1 ? 'border-b border-border/30' : ''
                    }`}>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2 flex-1">
                          <span className="text-sm font-medium text-card-foreground">{group.name}</span>
                          <Badge variant="secondary" className="text-xs">ÏûêÏú†Ï∞∏Ïó¨</Badge>
                        </div>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleJoinGroup(group.id);
                          }}
                          className="text-card-foreground border-border hover:bg-accent hover:text-card-foreground text-xs px-2 py-1"
                        >
                          Ï∞∏Ïó¨ÌïòÍ∏∞
                        </Button>
                      </div>
                      
                      <p className="text-xs text-muted-foreground mb-2">{group.description}</p>
                      
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>{getCategoryEmoji(group.category)} {getCategoryName(group.category)}</span>
                        <span>üë• {group.members}Î™Ö</span>
                        <span>‚è∞ {group.time}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="mandatory" className="px-4 pb-4 mt-4">
              <div className="space-y-0">
                {getFilteredGroups('mandatory').map((group, index) => (
                  <div key={group.id}>
                    <div className={`p-3 hover:bg-accent/50 transition-colors ${
                      index < getFilteredGroups('mandatory').length - 1 ? 'border-b border-border/30' : ''
                    }`}>
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2 flex-1">
                          <span className="text-sm font-medium text-card-foreground">{group.name}</span>
                          <Badge variant="destructive" className="text-xs">ÏùòÎ¨¥Ï∞∏Ïó¨</Badge>
                        </div>
                        <Button 
                          size="sm" 
                          variant="outline"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleJoinGroup(group.id);
                          }}
                          className="text-card-foreground border-border hover:bg-accent hover:text-card-foreground text-xs px-2 py-1"
                        >
                          Ï∞∏Ïó¨ÌïòÍ∏∞
                        </Button>
                      </div>
                      
                      <p className="text-xs text-muted-foreground mb-2">{group.description}</p>
                      
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>{getCategoryEmoji(group.category)} {getCategoryName(group.category)}</span>
                        <span>üë• {group.members}Î™Ö</span>
                        <span>‚è∞ {group.time}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}